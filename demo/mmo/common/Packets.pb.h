// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets.proto

#ifndef PROTOBUF_Packets_2eproto__INCLUDED
#define PROTOBUF_Packets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packets_2eproto();
void protobuf_AssignDesc_Packets_2eproto();
void protobuf_ShutdownFile_Packets_2eproto();

class CS_Login;
class SC_LoginResult;
class CS_Say;
class SC_SomeoneSay;
class CS_PrivateSay;
class SC_SomeonePrivateSay;

// ===================================================================

class CS_Login : public ::google::protobuf::Message {
 public:
  CS_Login();
  virtual ~CS_Login();

  CS_Login(const CS_Login& from);

  inline CS_Login& operator=(const CS_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_Login& default_instance();

  void Swap(CS_Login* other);

  // implements Message ----------------------------------------------

  CS_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_Login& from);
  void MergeFrom(const CS_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:Packet.CS_Login)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static CS_Login* default_instance_;
};
// -------------------------------------------------------------------

class SC_LoginResult : public ::google::protobuf::Message {
 public:
  SC_LoginResult();
  virtual ~SC_LoginResult();

  SC_LoginResult(const SC_LoginResult& from);

  inline SC_LoginResult& operator=(const SC_LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_LoginResult& default_instance();

  void Swap(SC_LoginResult* other);

  // implements Message ----------------------------------------------

  SC_LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_LoginResult& from);
  void MergeFrom(const SC_LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string welcome = 2;
  inline bool has_welcome() const;
  inline void clear_welcome();
  static const int kWelcomeFieldNumber = 2;
  inline const ::std::string& welcome() const;
  inline void set_welcome(const ::std::string& value);
  inline void set_welcome(const char* value);
  inline void set_welcome(const char* value, size_t size);
  inline ::std::string* mutable_welcome();
  inline ::std::string* release_welcome();
  inline void set_allocated_welcome(::std::string* welcome);

  // @@protoc_insertion_point(class_scope:Packet.SC_LoginResult)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_welcome();
  inline void clear_has_welcome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* welcome_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static SC_LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class CS_Say : public ::google::protobuf::Message {
 public:
  CS_Say();
  virtual ~CS_Say();

  CS_Say(const CS_Say& from);

  inline CS_Say& operator=(const CS_Say& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_Say& default_instance();

  void Swap(CS_Say* other);

  // implements Message ----------------------------------------------

  CS_Say* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_Say& from);
  void MergeFrom(const CS_Say& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Packet.CS_Say)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static CS_Say* default_instance_;
};
// -------------------------------------------------------------------

class SC_SomeoneSay : public ::google::protobuf::Message {
 public:
  SC_SomeoneSay();
  virtual ~SC_SomeoneSay();

  SC_SomeoneSay(const SC_SomeoneSay& from);

  inline SC_SomeoneSay& operator=(const SC_SomeoneSay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SomeoneSay& default_instance();

  void Swap(SC_SomeoneSay* other);

  // implements Message ----------------------------------------------

  SC_SomeoneSay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_SomeoneSay& from);
  void MergeFrom(const SC_SomeoneSay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Packet.SC_SomeoneSay)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static SC_SomeoneSay* default_instance_;
};
// -------------------------------------------------------------------

class CS_PrivateSay : public ::google::protobuf::Message {
 public:
  CS_PrivateSay();
  virtual ~CS_PrivateSay();

  CS_PrivateSay(const CS_PrivateSay& from);

  inline CS_PrivateSay& operator=(const CS_PrivateSay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_PrivateSay& default_instance();

  void Swap(CS_PrivateSay* other);

  // implements Message ----------------------------------------------

  CS_PrivateSay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_PrivateSay& from);
  void MergeFrom(const CS_PrivateSay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Packet.CS_PrivateSay)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static CS_PrivateSay* default_instance_;
};
// -------------------------------------------------------------------

class SC_SomeonePrivateSay : public ::google::protobuf::Message {
 public:
  SC_SomeonePrivateSay();
  virtual ~SC_SomeonePrivateSay();

  SC_SomeonePrivateSay(const SC_SomeonePrivateSay& from);

  inline SC_SomeonePrivateSay& operator=(const SC_SomeonePrivateSay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_SomeonePrivateSay& default_instance();

  void Swap(SC_SomeonePrivateSay* other);

  // implements Message ----------------------------------------------

  SC_SomeonePrivateSay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_SomeonePrivateSay& from);
  void MergeFrom(const SC_SomeonePrivateSay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:Packet.SC_SomeonePrivateSay)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_Packets_2eproto();
  friend void protobuf_AssignDesc_Packets_2eproto();
  friend void protobuf_ShutdownFile_Packets_2eproto();

  void InitAsDefaultInstance();
  static SC_SomeonePrivateSay* default_instance_;
};
// ===================================================================


// ===================================================================

// CS_Login

// optional string user = 1;
inline bool CS_Login::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_Login::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_Login::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_Login::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& CS_Login::user() const {
  // @@protoc_insertion_point(field_get:Packet.CS_Login.user)
  return *user_;
}
inline void CS_Login::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.CS_Login.user)
}
inline void CS_Login::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.CS_Login.user)
}
inline void CS_Login::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.CS_Login.user)
}
inline ::std::string* CS_Login::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.CS_Login.user)
  return user_;
}
inline ::std::string* CS_Login::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CS_Login::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.CS_Login.user)
}

// -------------------------------------------------------------------

// SC_LoginResult

// optional string name = 1;
inline bool SC_LoginResult::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_LoginResult::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_LoginResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_LoginResult::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_LoginResult::name() const {
  // @@protoc_insertion_point(field_get:Packet.SC_LoginResult.name)
  return *name_;
}
inline void SC_LoginResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_LoginResult.name)
}
inline void SC_LoginResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_LoginResult.name)
}
inline void SC_LoginResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_LoginResult.name)
}
inline ::std::string* SC_LoginResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_LoginResult.name)
  return name_;
}
inline ::std::string* SC_LoginResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_LoginResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_LoginResult.name)
}

// optional string welcome = 2;
inline bool SC_LoginResult::has_welcome() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_LoginResult::set_has_welcome() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_LoginResult::clear_has_welcome() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_LoginResult::clear_welcome() {
  if (welcome_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_->clear();
  }
  clear_has_welcome();
}
inline const ::std::string& SC_LoginResult::welcome() const {
  // @@protoc_insertion_point(field_get:Packet.SC_LoginResult.welcome)
  return *welcome_;
}
inline void SC_LoginResult::set_welcome(const ::std::string& value) {
  set_has_welcome();
  if (welcome_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_ = new ::std::string;
  }
  welcome_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_LoginResult.welcome)
}
inline void SC_LoginResult::set_welcome(const char* value) {
  set_has_welcome();
  if (welcome_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_ = new ::std::string;
  }
  welcome_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_LoginResult.welcome)
}
inline void SC_LoginResult::set_welcome(const char* value, size_t size) {
  set_has_welcome();
  if (welcome_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_ = new ::std::string;
  }
  welcome_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_LoginResult.welcome)
}
inline ::std::string* SC_LoginResult::mutable_welcome() {
  set_has_welcome();
  if (welcome_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    welcome_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_LoginResult.welcome)
  return welcome_;
}
inline ::std::string* SC_LoginResult::release_welcome() {
  clear_has_welcome();
  if (welcome_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = welcome_;
    welcome_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_LoginResult::set_allocated_welcome(::std::string* welcome) {
  if (welcome_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete welcome_;
  }
  if (welcome) {
    set_has_welcome();
    welcome_ = welcome;
  } else {
    clear_has_welcome();
    welcome_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_LoginResult.welcome)
}

// -------------------------------------------------------------------

// CS_Say

// optional string text = 1;
inline bool CS_Say::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_Say::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_Say::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_Say::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CS_Say::text() const {
  // @@protoc_insertion_point(field_get:Packet.CS_Say.text)
  return *text_;
}
inline void CS_Say::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.CS_Say.text)
}
inline void CS_Say::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.CS_Say.text)
}
inline void CS_Say::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.CS_Say.text)
}
inline ::std::string* CS_Say::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.CS_Say.text)
  return text_;
}
inline ::std::string* CS_Say::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CS_Say::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.CS_Say.text)
}

// -------------------------------------------------------------------

// SC_SomeoneSay

// optional string name = 1;
inline bool SC_SomeoneSay::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SomeoneSay::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SomeoneSay::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SomeoneSay::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_SomeoneSay::name() const {
  // @@protoc_insertion_point(field_get:Packet.SC_SomeoneSay.name)
  return *name_;
}
inline void SC_SomeoneSay::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_SomeoneSay.name)
}
inline void SC_SomeoneSay::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_SomeoneSay.name)
}
inline void SC_SomeoneSay::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_SomeoneSay.name)
}
inline ::std::string* SC_SomeoneSay::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_SomeoneSay.name)
  return name_;
}
inline ::std::string* SC_SomeoneSay::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_SomeoneSay::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_SomeoneSay.name)
}

// optional string text = 2;
inline bool SC_SomeoneSay::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SomeoneSay::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SomeoneSay::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SomeoneSay::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& SC_SomeoneSay::text() const {
  // @@protoc_insertion_point(field_get:Packet.SC_SomeoneSay.text)
  return *text_;
}
inline void SC_SomeoneSay::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_SomeoneSay.text)
}
inline void SC_SomeoneSay::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_SomeoneSay.text)
}
inline void SC_SomeoneSay::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_SomeoneSay.text)
}
inline ::std::string* SC_SomeoneSay::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_SomeoneSay.text)
  return text_;
}
inline ::std::string* SC_SomeoneSay::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_SomeoneSay::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_SomeoneSay.text)
}

// -------------------------------------------------------------------

// CS_PrivateSay

// optional string name = 1;
inline bool CS_PrivateSay::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_PrivateSay::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_PrivateSay::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_PrivateSay::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CS_PrivateSay::name() const {
  // @@protoc_insertion_point(field_get:Packet.CS_PrivateSay.name)
  return *name_;
}
inline void CS_PrivateSay::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.CS_PrivateSay.name)
}
inline void CS_PrivateSay::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.CS_PrivateSay.name)
}
inline void CS_PrivateSay::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.CS_PrivateSay.name)
}
inline ::std::string* CS_PrivateSay::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.CS_PrivateSay.name)
  return name_;
}
inline ::std::string* CS_PrivateSay::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CS_PrivateSay::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.CS_PrivateSay.name)
}

// optional string text = 2;
inline bool CS_PrivateSay::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_PrivateSay::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_PrivateSay::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_PrivateSay::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CS_PrivateSay::text() const {
  // @@protoc_insertion_point(field_get:Packet.CS_PrivateSay.text)
  return *text_;
}
inline void CS_PrivateSay::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.CS_PrivateSay.text)
}
inline void CS_PrivateSay::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.CS_PrivateSay.text)
}
inline void CS_PrivateSay::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.CS_PrivateSay.text)
}
inline ::std::string* CS_PrivateSay::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.CS_PrivateSay.text)
  return text_;
}
inline ::std::string* CS_PrivateSay::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CS_PrivateSay::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.CS_PrivateSay.text)
}

// -------------------------------------------------------------------

// SC_SomeonePrivateSay

// optional string name = 1;
inline bool SC_SomeonePrivateSay::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_SomeonePrivateSay::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_SomeonePrivateSay::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_SomeonePrivateSay::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_SomeonePrivateSay::name() const {
  // @@protoc_insertion_point(field_get:Packet.SC_SomeonePrivateSay.name)
  return *name_;
}
inline void SC_SomeonePrivateSay::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_SomeonePrivateSay.name)
}
inline void SC_SomeonePrivateSay::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_SomeonePrivateSay.name)
}
inline void SC_SomeonePrivateSay::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_SomeonePrivateSay.name)
}
inline ::std::string* SC_SomeonePrivateSay::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_SomeonePrivateSay.name)
  return name_;
}
inline ::std::string* SC_SomeonePrivateSay::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_SomeonePrivateSay::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_SomeonePrivateSay.name)
}

// optional string text = 2;
inline bool SC_SomeonePrivateSay::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_SomeonePrivateSay::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_SomeonePrivateSay::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_SomeonePrivateSay::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& SC_SomeonePrivateSay::text() const {
  // @@protoc_insertion_point(field_get:Packet.SC_SomeonePrivateSay.text)
  return *text_;
}
inline void SC_SomeonePrivateSay::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Packet.SC_SomeonePrivateSay.text)
}
inline void SC_SomeonePrivateSay::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Packet.SC_SomeonePrivateSay.text)
}
inline void SC_SomeonePrivateSay::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packet.SC_SomeonePrivateSay.text)
}
inline ::std::string* SC_SomeonePrivateSay::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Packet.SC_SomeonePrivateSay.text)
  return text_;
}
inline ::std::string* SC_SomeonePrivateSay::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SC_SomeonePrivateSay::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Packet.SC_SomeonePrivateSay.text)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packets_2eproto__INCLUDED
